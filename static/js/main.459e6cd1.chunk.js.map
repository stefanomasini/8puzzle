{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["solvePuzzle","fixInvertedLastRowPieces","adjustLast2RowPiecesStartingFromSecondLast","stepsToSolveSquare","stepsToMoveEmpty","buildStartingState","width","height","squares","rows","idx","r","row","c","push","buildOrderedSquaresList","value","randomMove","possibleMoves","length","dir","findEmpty","Math","floor","random","moveSquare","rowIdx","colIdx","newRows","map","val","board","console","log","context","SolvingContext","iterateSolvedCoords","coord","expectedValue","lastOfRow","lastRow","right","down","move","Error","find","key","state","f","expectedCell","protect","piece","secondLast","empty","destination","isSame","destinationCoordForEmpty","up","isProtected","left","insideBoard","possibleMove","specialCase","neighboursToConsider","possibleNeighbours","filter","sortInPlaceByKey","distance","protectedPieces","this","Set","add","Board","Coord","adj","nth","other","sqrt","solvingContext","has","arr","fn","sort","a","b","va","vb","NumberInput","minValue","maxValue","onChange","useState","text","setText","className","type","evt","target","intValue","parseInt","App","setWidth","setHeight","changeRows","solving","setSolving","solvingGenerator","setSolvingGenerator","solvingSpeed","changeSolvingSpeed","memory","startSolving","_solveStep","result","next","done","onClick","e","findDirection","preventDefault","disabled","numMoves","randomMoves","setTimeout","step","newHeight","newWidth","speed","style","paddingTop","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.459e6cd1.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from \"react\";\n\n\nfunction buildStartingState(width, height, squares) {\n    let rows = [];\n    let idx = 0;\n    for (let r=0; r<height; r += 1) {\n        let row = [];\n        for (let c=0; c<width; c += 1) {\n            row.push(squares[idx]);\n            idx += 1;\n        }\n        rows.push(row);\n    }\n    return rows;\n}\n\nfunction buildOrderedSquaresList(width, height) {\n    let squares = [];\n    let value = 1;\n    for (let r=0; r<height; r += 1) {\n        for (let c=0; c<width; c += 1) {\n            squares.push(((r<height-1) || (c<width-1)) ? value : null);\n            value += 1;\n        }\n    }\n    return squares;\n}\n\nfunction findEmpty(rows) {\n    for (let r=0; r<rows.length; r+=1) {\n        for (let c=0; c<rows[r].length; c+=1) {\n            if (rows[r][c] === null) {\n                let possibleMoves = [];\n                if (c>0) {\n                    possibleMoves.push({r,c: c-1,dir:'right'});\n                }\n                if (c<rows[r].length-1) {\n                    possibleMoves.push({r,c:c+1,dir:'left'});\n                }\n                if (r>0) {\n                    possibleMoves.push({r:r-1,c,dir:'down'});\n                }\n                if (r<rows.length-1) {\n                    possibleMoves.push({r:r+1,c,dir:'up'});\n                }\n                return possibleMoves;\n            }\n        }\n    }\n}\n\nfunction randomMove(rows) {\n    let possibleMoves = findEmpty(rows);\n    const randomIndex = Math.floor(Math.random() * possibleMoves.length);\n    let {r,c,dir} = possibleMoves[randomIndex];\n    return moveSquare(rows, r, c, dir);\n}\n\nfunction randomMoves(rows, numMoves) {\n    while (numMoves > 0) {\n        rows = randomMove(rows);\n        numMoves -= 1;\n    }\n    return rows;\n}\n\nfunction moveSquare(rows, rowIdx, colIdx, dir) {\n    const newRows = rows.map(row => row.map(val => val));\n    const value = newRows[rowIdx][colIdx];\n    newRows[rowIdx][colIdx] = null;\n    if (dir === 'up') {\n        newRows[rowIdx-1][colIdx] = value;\n    }\n    if (dir === 'down') {\n        newRows[rowIdx+1][colIdx] = value;\n    }\n    if (dir === 'left') {\n        newRows[rowIdx][colIdx-1] = value;\n    }\n    if (dir === 'right') {\n        newRows[rowIdx][colIdx+1] = value;\n    }\n    return newRows;\n}\n\nfunction findDirection(rows, rowIdx, colIdx, width, height) {\n    if (rowIdx < (height-1) && rows[rowIdx+1][colIdx] === null) {\n        return 'down';\n    }\n    if (rowIdx > 0 && rows[rowIdx-1][colIdx] === null) {\n        return 'up';\n    }\n    if (colIdx < (width-1) && rows[rowIdx][colIdx+1] === null) {\n        return 'right';\n    }\n    if (colIdx > 0 && rows[rowIdx][colIdx-1] === null) {\n        return 'left';\n    }\n    return null;\n}\n\nfunction *solvePuzzle(board) {\n    console.log('Start solving');\n    let context = new SolvingContext(board);\n    for (let { coord, expectedValue } of context.board.iterateSolvedCoords()) {\n        if (coord.value !== expectedValue\n            || (coord.lastOfRow(2) && !coord.lastRow(1) && coord.right.value !== expectedValue+1)\n            || (coord.lastRow(2) && !coord.lastOfRow(1) && coord.down.value !== (expectedValue + context.board.width))) {\n            console.log(`Solving piece ${expectedValue}`);\n\n            // Special case: second-last row\n            if (coord.lastRow(2) || coord.lastRow(1)) {\n                // Special case: last 4 cells\n                if (coord.lastOfRow(2)) {\n                    while (coord.value !== expectedValue || coord.right.value !== expectedValue+1 || coord.down.value !== expectedValue + context.board.width) {\n                        if (coord.value === null) {\n                            yield context.board.move(coord.right, 'left');\n                        } else if (coord.right.value === null) {\n                            yield context.board.move(coord.right.down, 'up');\n                        } else if (coord.right.down.value === null) {\n                            yield context.board.move(coord.down, 'right');\n                        } else if (coord.down.value === null) {\n                            yield context.board.move(coord, 'down');\n                        } else {\n                            throw new Error(`Unexpected position of empty ${context.board.find(null).key}`);\n                        }\n                    }\n                    return;\n                } else {\n                    if (coord.value !== expectedValue + context.board.width) {\n                        for (let state of stepsToSolveSquare(context, context.board.find(expectedValue + context.board.width), coord)) {\n                            yield state;\n                        }\n                    }\n                    const expectedCell = context.board.find(expectedValue);\n                    if (expectedCell.c <= coord.c+1) {\n                        for (let state of stepsToSolveSquare(context, expectedCell, context.board.coord(expectedCell.r, coord.c+2))) {\n                            yield state;\n                        }\n                        if (coord.value !== expectedValue + context.board.width) {\n                            for (let state of stepsToSolveSquare(context, context.board.find(expectedValue + context.board.width), coord)) {\n                                yield state;\n                            }\n                        }\n                    }\n                    if (coord.right.value !== expectedValue) {\n                        for (let state of stepsToSolveSquare(context.protect(coord), context.board.find(expectedValue), coord.right)) {\n                            yield state;\n                        }\n                    }\n                    for (let state of stepsToMoveEmpty(context.protect(coord).protect(coord.right), context.board.find(null), coord.down)) {\n                        yield state;\n                    }\n                    yield context.board.move(coord, 'down');\n                    yield context.board.move(coord.right, 'left');\n                }\n            } else {\n                // Special case: second-last position, where value is not last\n                if ((coord.lastOfRow(2) && coord.value !== expectedValue+1) || (coord.right.lastOfRow(1) && coord.right.value !== expectedValue+1)) {\n                    console.log('Move last value piece to second-last position')\n                    for (let state of stepsToSolveSquare(context, context.board.find(expectedValue+1), coord)) {\n                        yield state;\n                    }\n                    context = context.protect(coord);\n                }\n                // Special case: second-last position, where value is last\n                if (coord.lastOfRow(2) && coord.value === expectedValue+1) {\n                    // Special case: last 2 row pieces are inverted\n                    if (coord.right.value === expectedValue) {\n                        console.log('Special case: last 2 row pieces are inverted');\n                        for (let state of fixInvertedLastRowPieces(context, coord)) {\n                            yield state;\n                        }\n                    } else {\n                        // Move second-last piece below the current position\n                        console.log('Move second-last piece below the current position')\n                        for (let state of stepsToSolveSquare(context, context.board.find(expectedValue), coord.down)) {\n                            yield state;\n                        }\n                        console.log('done');\n                        for (let state of adjustLast2RowPiecesStartingFromSecondLast(context, coord)) {\n                            yield state;\n                        }\n                    }\n                } else {\n                    // Common case\n                    let piece = context.board.find(expectedValue);\n                    for (let state of stepsToSolveSquare(context, piece, coord)) {\n                        yield state;\n                    }\n                }\n\n                if (coord.value !== expectedValue) {\n                    throw new Error('Unexpected unsolved step');\n                }\n            }\n        }\n        context = context.protect(coord);\n    }\n}\n\nfunction *fixInvertedLastRowPieces(context, secondLast) {\n    let empty = context.board.find(null);\n    for (let state of stepsToMoveEmpty(context.protect(secondLast).protect(secondLast.right), empty, secondLast.down)) {\n        yield state;\n    }\n\n    yield context.board.move(secondLast.down.right, 'left');\n    yield context.board.move(secondLast.right, 'down');\n    yield context.board.move(secondLast, 'right');\n    yield context.board.move(secondLast.down, 'up');\n    yield context.board.move(secondLast.down.right, 'left');\n    yield context.board.move(secondLast.down.down.right, 'up');\n    yield context.board.move(secondLast.down.down, 'right');\n    yield context.board.move(secondLast.down, 'down');\n    yield context.board.move(secondLast.down.right, 'left');\n    yield context.board.move(secondLast.right, 'down');\n    yield context.board.move(secondLast, 'right');\n    yield context.board.move(secondLast.down, 'up');\n    yield context.board.move(secondLast.down.right, 'left');\n    yield context.board.move(secondLast.right, 'down');\n    yield context.board.move(secondLast, 'right');\n    yield context.board.move(secondLast.down, 'up');\n    yield context.board.move(secondLast.down.down, 'up');\n    for (let state of adjustLast2RowPiecesStartingFromSecondLast(context, secondLast)) {\n        yield state;\n    }\n}\n\nfunction *adjustLast2RowPiecesStartingFromSecondLast(context, secondLast) {\n    for (let state of stepsToMoveEmpty(context.protect(secondLast).protect(secondLast.right).protect(secondLast.down), context.board.find(null), secondLast.down.down)) {\n        yield state;\n    }\n    yield context.board.move(secondLast.down.down.right, 'left');\n    yield context.board.move(secondLast.down.right, 'down');\n    yield context.board.move(secondLast.right, 'down');\n    yield context.board.move(secondLast, 'right');\n    yield context.board.move(secondLast.down, 'up');\n}\n\nfunction *stepsToSolveSquare(context, piece, destination) {\n    if (piece.isSame(destination)) {\n        return;\n    }\n    let empty = context.board.find(null);\n    const destinationCoordForEmpty = (piece.r > destination.r && !piece.up.isProtected(context))\n        ? piece.up\n        : (piece.c > destination.c && !piece.left.isProtected(context)) ? piece.left : piece.right;\n    if (!destinationCoordForEmpty.insideBoard || destinationCoordForEmpty.isProtected(context)) {\n        throw new Error('No possible destination coords for empty');\n    }\n    for (let state of stepsToMoveEmpty(context.protect(piece), empty, destinationCoordForEmpty)) {\n        yield state;\n    }\n    // console.log(`Moving piece ${piece.key} to ${destination.key}`);\n    while (true) {\n        if (piece.isSame(destination)) {\n            break;\n        }\n        empty = context.board.find(null);\n        const possibleMove = piece.possibleMove();\n        if (!possibleMove) {\n            throw new Error('Unexpected: no possible move');\n        }\n        if (piece.c > destination.c) {\n            if (possibleMove !== 'left') {\n                for (let state of stepsToMoveEmpty(context.protect(piece), empty, piece.left)) {\n                    yield state;\n                }\n                if (piece.possibleMove() !== 'left') {\n                    throw new Error('Unexpected: should have made left move possible');\n                }\n            }\n            yield context.board.move(piece, 'left');\n            piece = piece.left;\n        } else if (piece.c < destination.c) {\n            if (possibleMove !== 'right') {\n                for (let state of stepsToMoveEmpty(context.protect(piece), empty, piece.right)) {\n                    yield state;\n                }\n                if (piece.possibleMove() !== 'right') {\n                    throw new Error('Unexpected: should have made right move possible');\n                }\n            }\n            yield context.board.move(piece, 'right');\n            piece = piece.right;\n        } else if (piece.r > destination.r) {\n            if (possibleMove !== 'up') {\n                for (let state of stepsToMoveEmpty(context.protect(piece), empty, piece.up)) {\n                    yield state;\n                }\n                if (piece.possibleMove() !== 'up') {\n                    throw new Error('Unexpected: should have made up move possible');\n                }\n            }\n            yield context.board.move(piece, 'up');\n            piece = piece.up;\n        } else {\n            throw new Error('Unexpected: should either expect a left, or right or up move');\n        }\n    }\n}\n\nfunction *stepsToMoveEmpty(context, empty, destination) {\n    // console.log(`moving empty from ${empty.key} to ${destination.key}`);\n    if (empty.value !== null) {\n        throw new Error(`Piece not empty at ${empty.key}`);\n    }\n    while (!empty.isSame(destination)) {\n        const specialCase = empty.up.up.right.isSame(destination)\n            && empty.up.right.isProtected(context)\n            && empty.up.up.isProtected(context);\n        const neighboursToConsider = specialCase\n            ? [{\n                piece: empty.right,\n                dir: 'left',\n            }]\n            : [{\n                    piece: empty.up,\n                    dir: 'down',\n                }, {\n                    piece: empty.down,\n                    dir: 'up',\n                }, {\n                    piece: empty.right,\n                    dir: 'left',\n                }, {\n                    piece: empty.left,\n                    dir: 'right',\n                }];\n        let possibleNeighbours = neighboursToConsider.filter(({piece}) => piece.insideBoard && !piece.isProtected(context));\n        if (possibleNeighbours.length === 0) {\n            throw new Error(`No place to move empty ${empty.key}`);\n        }\n        sortInPlaceByKey(possibleNeighbours, ({piece}) => piece.distance(destination))\n        // console.log(`empty in ${empty.key}`);\n        // for (let {piece} of possibleNeighbours) {\n        //     console.log(`Possible piece ${piece.key}, distance ${piece.distance(destination)}`);\n        // }\n        let { piece, dir } = possibleNeighbours[0];\n        // console.log(`moving piece ${piece.key} ${dir}`);\n        yield context.board.move(piece, dir);\n        empty = piece;\n        if (empty.value !== null) {\n            throw new Error(`Piece not empty at ${empty.key}`);\n        }\n    }\n}\n\nclass SolvingContext {\n    constructor(board, protectedPieces) {\n        this.board = board;\n        this.protectedPieces = protectedPieces || new Set();\n    }\n    protect(coord) {\n        let protectedPieces = new Set(this.protectedPieces);\n        protectedPieces.add(coord.key);\n        return new SolvingContext(this.board, protectedPieces);\n    }\n}\n\nclass Board {\n    constructor(rows, width, height) {\n        this.rows = rows;\n        this.width = width;\n        this.height = height;\n    }\n    coord(r, c) {\n        return new Coord(r, c, this);\n    }\n    find(value) {\n        for (let r=0; r<this.height; r+=1) {\n            for (let c=0; c<this.width; c+=1) {\n                if (this.rows[r][c] === value) {\n                    return this.coord(r, c);\n                }\n            }\n        }\n        throw new Error(`Value ${value} not found`);\n    }\n    move(piece, dir) {\n        if (!piece.insideBoard) {\n            throw new Error('Coordinates out of board');\n        }\n        if (piece.adj(dir).value !== null) {\n            throw new Error(`Invalid move: ${piece.key} ${dir}`);\n        }\n        const newRows = this.rows.map(row => row.map(val => val));\n        const value = newRows[piece.r][piece.c];\n        newRows[piece.r][piece.c] = null;\n        if (dir === 'up') {\n            newRows[piece.r-1][piece.c] = value;\n        }\n        if (dir === 'down') {\n            newRows[piece.r+1][piece.c] = value;\n        }\n        if (dir === 'left') {\n            newRows[piece.r][piece.c-1] = value;\n        }\n        if (dir === 'right') {\n            newRows[piece.r][piece.c+1] = value;\n        }\n        this.rows = newRows;\n        return newRows;\n    }\n    *iterateSolvedCoords() {\n        let expectedValue = 1;\n        for (let r=0; r<this.height; r+=1) {\n            for (let c=0; c<this.width; c+=1) {\n                if (r < this.height-1 || c < this.width-1) {\n                    yield {\n                        coord: this.coord(r, c),\n                        expectedValue,\n                    };\n                }\n                expectedValue += 1;\n            }\n        }\n    }\n}\n\nclass Coord {\n    constructor(r, c, board) {\n        this.r = r;\n        this.c = c;\n        this.key = `${r}:${c}`;\n        this.board = board;\n    }\n    lastOfRow(nth) {\n        return this.c === this.board.width - nth;\n    }\n    lastRow(nth) {\n        return this.r === this.board.height - nth;\n    }\n    isSame(other) {\n        return this.r === other.r && this.c === other.c;\n    }\n    distance(other) {\n        return Math.sqrt((other.r-this.r)**2 + (other.c-this.c)**2);\n    }\n    isProtected(solvingContext) {\n        return solvingContext.protectedPieces.has(this.key);\n    }\n    get insideBoard() {\n        return (this.c >= 0) && (this.c < this.board.width)\n               && (this.r >= 0) && (this.r < this.board.height);\n    }\n    adj(dir) {\n        if (dir === 'up') {\n            return new Coord(this.r-1, this.c, this.board);\n        }\n        if (dir === 'down') {\n            return new Coord(this.r+1, this.c, this.board);\n        }\n        if (dir === 'left') {\n            return new Coord(this.r, this.c-1, this.board);\n        }\n        if (dir === 'right') {\n            return new Coord(this.r, this.c+1, this.board);\n        }\n        throw new Error(`Unknown direction ${dir}`);\n    }\n    get left() { return this.adj('left'); }\n    get right() { return this.adj('right'); }\n    get up() { return this.adj('up'); }\n    get down() { return this.adj('down'); }\n    get value() {\n        return this.board.rows[this.r][this.c];\n    }\n    possibleMove() {\n        if (this.up.insideBoard && this.up.value === null) {\n            return 'up';\n        }\n        if (this.right.insideBoard && this.right.value === null) {\n            return 'right';\n        }\n        if (this.down.insideBoard && this.down.value === null) {\n            return 'down';\n        }\n        if (this.left.insideBoard && this.left.value === null) {\n            return 'left';\n        }\n        return null;\n    }\n}\n\nfunction sortInPlaceByKey(arr, fn) {\n    arr.sort(function (a, b) {\n        var va = fn(a);\n        var vb = fn(b);\n        if (va < vb) {\n            return -1;\n        } else if (va > vb) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n    return arr;\n}\n\nfunction App() {\n    const [width, setWidth] = useState(4);\n    const [height, setHeight] = useState(4);\n    const [rows, changeRows] = useState(buildStartingState(width, height, buildOrderedSquaresList(width, height)));\n    let [solving, setSolving] = useState(false);\n    let [solvingGenerator, setSolvingGenerator] = useState(null);\n    const [solvingSpeed, changeSolvingSpeed] = useState(10);\n    const [memory] = useState({\n        solvingSpeed: null,\n    });\n    function onClick(e, rowIdx, colIdx) {\n        const dir = findDirection(rows, rowIdx, colIdx, width, height);\n        if (dir) {\n            changeRows(moveSquare(rows, rowIdx, colIdx, dir));\n        }\n        e.preventDefault();\n        setSolving(false);\n        memory.solvingSpeed = null;\n        setSolvingGenerator(null);\n    }\n    function reset() {\n        changeRows(buildStartingState(width, height, buildOrderedSquaresList(width, height)));\n        setSolving(false);\n        memory.solvingSpeed = null;\n        setSolvingGenerator(null);\n    }\n    function shuffle() {\n        changeRows(randomMoves(buildStartingState(width, height, buildOrderedSquaresList(width, height)), width*height*1000));\n        setSolving(false);\n        memory.solvingSpeed = null;\n        setSolvingGenerator(null);\n    }\n    function startSolving() {\n        solvingGenerator = solvePuzzle(new Board(rows, width, height));\n        setSolvingGenerator(solvingGenerator);\n    }\n    function solve() {\n        if (solving) {\n            setSolving(false);\n            memory.solvingSpeed = null;\n            setSolvingGenerator(null);\n        } else {\n            if (!solvingGenerator) {\n                startSolving();\n            }\n            function step() {\n                if (!solvingGenerator || !_solveStep()) {\n                    setSolving(false);\n                    memory.solvingSpeed = null;\n                    setSolvingGenerator(null);\n                }\n                if (memory.solvingSpeed) {\n                    setTimeout(step, 1 + (10-memory.solvingSpeed) * 100);\n                }\n            }\n            setTimeout(step, 1);\n            setSolving(true);\n            memory.solvingSpeed = solvingSpeed;\n        }\n    }\n    function _solveStep() {\n        const result = solvingGenerator.next();\n        if (!result.done) {\n            changeRows(result.value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    function solveStep() {\n        if (!solvingGenerator) {\n            startSolving();\n        }\n        if (!_solveStep()) {\n            setSolving(false);\n            memory.solvingSpeed = null;\n            setSolvingGenerator(null);\n        }\n    }\n    function onChangeWidth(newWidth) {\n        setWidth(newWidth);\n        changeRows(buildStartingState(newWidth, height, buildOrderedSquaresList(newWidth, height)));\n    }\n    function onChangeHeight(newHeight) {\n        setHeight(newHeight);\n        changeRows(buildStartingState(width, newHeight, buildOrderedSquaresList(width, newHeight)));\n    }\n    function onChangeSolvingSpeed(speed) {\n        changeSolvingSpeed(speed);\n        memory.solvingSpeed = speed;\n    }\n    return (\n        <div className=\"app\">\n            <div className=\"board\">\n                { rows.map((row, rowIdx) => <div key={rowIdx} className=\"row\">\n                    { row.map((value, colIdx) => value ? <div key={colIdx} className=\"square\" onClick={(e) => { onClick(e, rowIdx, colIdx); }}><p>{value}</p></div> : <div key={colIdx} className=\"empty\"/> ) }\n                </div>)}\n            </div>\n            <div className=\"buttons\">\n                <button onClick={reset} disabled={solving}>Reset</button>\n                <button onClick={shuffle} disabled={solving}>Shufle</button>\n                <button onClick={solveStep} disabled={solving}>Solve step</button>\n                <button onClick={solve}>{ solving ? 'Stop' : 'Solve' }</button>\n            </div>\n            <div className=\"buttons\">\n                Size:\n                <NumberInput value={height} minValue={1} maxValue={30} onChange={onChangeHeight}/>\n                X\n                <NumberInput value={width} minValue={1} maxValue={30} onChange={onChangeWidth}/>\n                Solving speed:\n                <NumberInput value={solvingSpeed} minValue={1} maxValue={10} onChange={onChangeSolvingSpeed}/>\n            </div>\n            <div className=\"buttons\" style={{ paddingTop: 10 }}>\n                <a href=\"https://github.com/stefanomasini/8puzzle\">GitHub project</a>\n            </div>\n        </div>\n    );\n}\n\nfunction NumberInput({ value, minValue, maxValue, onChange }) {\n    const [text, setText] = useState(value);\n    function _onChange(evt) {\n        setText(evt.target.value);\n        try {\n            const intValue = parseInt(evt.target.value);\n            if (intValue >= minValue && intValue <= maxValue) {\n                onChange(intValue);\n            }\n        } catch {}\n    }\n    return <input className=\"input\" type=\"text\" value={text} onChange={_onChange}/>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}